/*
 * This file is generated by jOOQ.
 */
package schemas.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import schemas.Keys;
import schemas.Public;
import schemas.tables.records.GendersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genders extends TableImpl<GendersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.genders</code>
     */
    public static final Genders GENDERS = new Genders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GendersRecord> getRecordType() {
        return GendersRecord.class;
    }

    /**
     * The column <code>public.genders.id</code>.
     */
    public final TableField<GendersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.genders.name</code>.
     */
    public final TableField<GendersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Genders(Name alias, Table<GendersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genders(Name alias, Table<GendersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.genders</code> table reference
     */
    public Genders(String alias) {
        this(DSL.name(alias), GENDERS);
    }

    /**
     * Create an aliased <code>public.genders</code> table reference
     */
    public Genders(Name alias) {
        this(alias, GENDERS);
    }

    /**
     * Create a <code>public.genders</code> table reference
     */
    public Genders() {
        this(DSL.name("genders"), null);
    }

    public <O extends Record> Genders(Table<O> child, ForeignKey<O, GendersRecord> key) {
        super(child, key, GENDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<GendersRecord, Integer> getIdentity() {
        return (Identity<GendersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GendersRecord> getPrimaryKey() {
        return Keys.GENDERS_PKEY;
    }

    @Override
    public Genders as(String alias) {
        return new Genders(DSL.name(alias), this);
    }

    @Override
    public Genders as(Name alias) {
        return new Genders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genders rename(String name) {
        return new Genders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genders rename(Name name) {
        return new Genders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
