/*
 * This file is generated by jOOQ.
 */
package schemas.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import schemas.Keys;
import schemas.Public;
import schemas.tables.records.EmployessRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employess extends TableImpl<EmployessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employess</code>
     */
    public static final Employess EMPLOYESS = new Employess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployessRecord> getRecordType() {
        return EmployessRecord.class;
    }

    /**
     * The column <code>public.employess.id</code>.
     */
    public final TableField<EmployessRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employess.gender_id</code>.
     */
    public final TableField<EmployessRecord, Integer> GENDER_ID = createField(DSL.name("gender_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employess.job_id</code>.
     */
    public final TableField<EmployessRecord, Integer> JOB_ID = createField(DSL.name("job_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employess.name</code>.
     */
    public final TableField<EmployessRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employess.last_name</code>.
     */
    public final TableField<EmployessRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.employess.birthdate</code>.
     */
    public final TableField<EmployessRecord, LocalDate> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATE, this, "");

    private Employess(Name alias, Table<EmployessRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employess(Name alias, Table<EmployessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employess</code> table reference
     */
    public Employess(String alias) {
        this(DSL.name(alias), EMPLOYESS);
    }

    /**
     * Create an aliased <code>public.employess</code> table reference
     */
    public Employess(Name alias) {
        this(alias, EMPLOYESS);
    }

    /**
     * Create a <code>public.employess</code> table reference
     */
    public Employess() {
        this(DSL.name("employess"), null);
    }

    public <O extends Record> Employess(Table<O> child, ForeignKey<O, EmployessRecord> key) {
        super(child, key, EMPLOYESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EmployessRecord, Integer> getIdentity() {
        return (Identity<EmployessRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployessRecord> getPrimaryKey() {
        return Keys.EMPLOYESS_PKEY;
    }

    @Override
    public List<ForeignKey<EmployessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYESS__FK_EMP_GEND, Keys.EMPLOYESS__FK_EMP_JOB);
    }

    private transient Genders _genders;
    private transient Jobs _jobs;

    /**
     * Get the implicit join path to the <code>public.genders</code> table.
     */
    public Genders genders() {
        if (_genders == null)
            _genders = new Genders(this, Keys.EMPLOYESS__FK_EMP_GEND);

        return _genders;
    }

    /**
     * Get the implicit join path to the <code>public.jobs</code> table.
     */
    public Jobs jobs() {
        if (_jobs == null)
            _jobs = new Jobs(this, Keys.EMPLOYESS__FK_EMP_JOB);

        return _jobs;
    }

    @Override
    public Employess as(String alias) {
        return new Employess(DSL.name(alias), this);
    }

    @Override
    public Employess as(Name alias) {
        return new Employess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employess rename(String name) {
        return new Employess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employess rename(Name name) {
        return new Employess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String, String, LocalDate> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
