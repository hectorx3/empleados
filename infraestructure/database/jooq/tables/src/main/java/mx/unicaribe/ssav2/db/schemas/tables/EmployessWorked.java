/*
 * This file is generated by jOOQ.
 */
package schemas.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import schemas.Keys;
import schemas.Public;
import schemas.tables.records.EmployessWorkedRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployessWorked extends TableImpl<EmployessWorkedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employess_worked</code>
     */
    public static final EmployessWorked EMPLOYESS_WORKED = new EmployessWorked();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployessWorkedRecord> getRecordType() {
        return EmployessWorkedRecord.class;
    }

    /**
     * The column <code>public.employess_worked.id</code>.
     */
    public final TableField<EmployessWorkedRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employess_worked.employee_id</code>.
     */
    public final TableField<EmployessWorkedRecord, Integer> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employess_worked.worked_hours</code>.
     */
    public final TableField<EmployessWorkedRecord, Integer> WORKED_HOURS = createField(DSL.name("worked_hours"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employess_worked.worked_date</code>.
     */
    public final TableField<EmployessWorkedRecord, LocalDate> WORKED_DATE = createField(DSL.name("worked_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private EmployessWorked(Name alias, Table<EmployessWorkedRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployessWorked(Name alias, Table<EmployessWorkedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employess_worked</code> table reference
     */
    public EmployessWorked(String alias) {
        this(DSL.name(alias), EMPLOYESS_WORKED);
    }

    /**
     * Create an aliased <code>public.employess_worked</code> table reference
     */
    public EmployessWorked(Name alias) {
        this(alias, EMPLOYESS_WORKED);
    }

    /**
     * Create a <code>public.employess_worked</code> table reference
     */
    public EmployessWorked() {
        this(DSL.name("employess_worked"), null);
    }

    public <O extends Record> EmployessWorked(Table<O> child, ForeignKey<O, EmployessWorkedRecord> key) {
        super(child, key, EMPLOYESS_WORKED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EmployessWorkedRecord, Integer> getIdentity() {
        return (Identity<EmployessWorkedRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployessWorkedRecord> getPrimaryKey() {
        return Keys.EMPLOYESS_WORKED_PKEY;
    }

    @Override
    public List<ForeignKey<EmployessWorkedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYESS_WORKED__FK_WORKER_EMP);
    }

    private transient Employess _employess;

    /**
     * Get the implicit join path to the <code>public.employess</code> table.
     */
    public Employess employess() {
        if (_employess == null)
            _employess = new Employess(this, Keys.EMPLOYESS_WORKED__FK_WORKER_EMP);

        return _employess;
    }

    @Override
    public EmployessWorked as(String alias) {
        return new EmployessWorked(DSL.name(alias), this);
    }

    @Override
    public EmployessWorked as(Name alias) {
        return new EmployessWorked(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployessWorked rename(String name) {
        return new EmployessWorked(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployessWorked rename(Name name) {
        return new EmployessWorked(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
